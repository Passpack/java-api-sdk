package com.passpack.api.sdk.encryption;

import com.passpack.api.sdk.model.encryption.RsaKeyMaterial;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.math.BigInteger;
import java.util.Base64;

public class RsaEncryptionTest {

    @Test
    public void testCanCreatePublicKey() throws Exception {
        String publicKey = "2|uSxgWHftIitMHtCmzpBJqfrd6o7akky0yIm5vFbgUFPu9kLdf+vGXx4cS6d6RqCABtFBOSR2Hk3ebrZynCBIxlJigDStYFOt83WXxIrl4LpwI56wrPDTpnoTNoJMAwI9D0qihcDKXeXz8I9E10qsYCLXG0M1QERfhWK22u1MRa8|AQAB";
        RsaKeyMaterial rsaKeyMaterial = new RsaKeyMaterial(publicKey);
    // Should not throw exception
        rsaKeyMaterial.dumpKey();
    }

    @Test
    public void testDecryptionV2() throws Exception {
        String encodedData = "FDj0ZhEiOAU9TJ7+T2H7THTZ1cUvrNGlkh9QL+eAXZATSAnBqBkSMN5i8iDDgqIs64IKAYl59Ppgu36CWFOMsAhgxCcuBw55CrGK3eUaqZDg/UU6/S0kbfiVaxdcSWqzcyZ2gTaWUlTBpgVDyCEAqzlPNpUqB5Q8FnEFUSBT1ks=";
        String encodedKey = "2|k3c40XTtPsxtpqhHXYDuH53saGzCSeoGjAnV4FUKtaYvUyUKkHMMem6AMTlJ17t59xNM5eV6u84sPlMg1N0EgNaf+zWPabUeWL2v3FcnNWoqBERMD4PyNHWjbZRGwWz85Ymt/ybw+nZjLLkh3bE/K+1qbyH3RLdu8aIccLCANtc=|AQAB|M4XqUjSaV+CxRxNwq9jKWj2hRfMKBy0/UFp3YcQU09bWniRJBqNL7tMA8zHi/P9B4/PYYFLHiSrGBpig1f7K/XYeEvkRM/f4Wz5qd52Sq4j+lTa8K5Tt+Fd3YJCRH2P3cNxB7D9G50CfLlElkoas82EDC3EYkzJUpHLpjAH3gvE=|nO5K4W2mQC7cPGLgRuQKdprQuZw412YVa3rNl20htwICA5lAn2eop7rBccBbES/5lnHkKGpKrxHmfpe6dLeXAw==|8I9DtpTFnNJ4yODfnwFwczvc+KkPWCpkyXOv7leIn4Vx04y+seVTPl0fUXGz2/e9iAYnsdeFkk3lpVz3wPzenQ==|PcKKNa2xgBDxG9LN8RhOBd9nxaR1uk+ynln2D2IjoqJnqILnq9Rfy6Lz/pB1Ro5a65pm8IDkY4Hn9GpCNy0JgQ==|k+chtNJHpaHqTWelVffmkZMOy3v2STjXety8IIiFIb9EOtNgM7RRuBg9Ny/3a5koWMegBEIEh+2I8mD0mx1eKQ==|GMCXhSId6JVjrzERy8qVAo4ljX0u5Lbo47K8eGVrU+OMJ/HV+RAy4quOUkYRRDVLElHpEg96J/NgJnlkX65xyw==";
        RsaKeyMaterial rsaKeyMaterial = new RsaKeyMaterial(encodedKey);
        String decodedData = RsaEncryption.decryptWithPasspackJWK(rsaKeyMaterial, encodedData);
        Assertions.assertEquals("_u25w7y3kc", decodedData);
    }

    @Test
    public void testEncryptAndDecryptV2() throws  Exception {
        String passpackJWK = "2|k3c40XTtPsxtpqhHXYDuH53saGzCSeoGjAnV4FUKtaYvUyUKkHMMem6AMTlJ17t59xNM5eV6u84sPlMg1N0EgNaf+zWPabUeWL2v3FcnNWoqBERMD4PyNHWjbZRGwWz85Ymt/ybw+nZjLLkh3bE/K+1qbyH3RLdu8aIccLCANtc=|AQAB|M4XqUjSaV+CxRxNwq9jKWj2hRfMKBy0/UFp3YcQU09bWniRJBqNL7tMA8zHi/P9B4/PYYFLHiSrGBpig1f7K/XYeEvkRM/f4Wz5qd52Sq4j+lTa8K5Tt+Fd3YJCRH2P3cNxB7D9G50CfLlElkoas82EDC3EYkzJUpHLpjAH3gvE=|nO5K4W2mQC7cPGLgRuQKdprQuZw412YVa3rNl20htwICA5lAn2eop7rBccBbES/5lnHkKGpKrxHmfpe6dLeXAw==|8I9DtpTFnNJ4yODfnwFwczvc+KkPWCpkyXOv7leIn4Vx04y+seVTPl0fUXGz2/e9iAYnsdeFkk3lpVz3wPzenQ==|PcKKNa2xgBDxG9LN8RhOBd9nxaR1uk+ynln2D2IjoqJnqILnq9Rfy6Lz/pB1Ro5a65pm8IDkY4Hn9GpCNy0JgQ==|k+chtNJHpaHqTWelVffmkZMOy3v2STjXety8IIiFIb9EOtNgM7RRuBg9Ny/3a5koWMegBEIEh+2I8mD0mx1eKQ==|GMCXhSId6JVjrzERy8qVAo4ljX0u5Lbo47K8eGVrU+OMJ/HV+RAy4quOUkYRRDVLElHpEg96J/NgJnlkX65xyw==";
        RsaKeyMaterial rsaKeyMaterial = new RsaKeyMaterial(passpackJWK);

        String dataToEncode = "Hello World!";
        String encodedData = RsaEncryption.encryptWithPasspackJWK(rsaKeyMaterial, dataToEncode);
        System.out.println("encoded: " + encodedData);
        String decodedData = RsaEncryption.decryptWithPasspackJWK(rsaKeyMaterial, encodedData);
        Assertions.assertEquals(dataToEncode, decodedData);

    }


    @Test
    public void testEncryptAndDecryptV4() throws  Exception {
        String testPasspackJWK = "4|xBOoCclo0rnqAePxnM9cPRG3HIGbygjFPJZfBt6y3BtO+4wec+wOcz2Rev5n1X00YxDcOBxgm/IewbWYtYckw1hxP5JlYtCVkyicgMO32B/pC9chKPT/9fT+hEvABiS1PKVtGL6hrSwiUyEsudZFYp7FPNmbmx8dEjYdGM1JwbqKWqx65tgQ3afuoPrjQeUTQXY2nLgd6igAq5YwXkBur5UpGnsWvwX6num0oCnbck+KH2qIv6y4sPtcEop6uK5oCCP9cprSYTyl4lT+fC/hGuCQwFsORNEyu6F9Pfv//juamPsBeQ7T7Y2NG701yYXuFAyMfRgeO+U8Q/dskn94e7pLs/8ewJjxP5aszp6VFnjelyMqN4l1v/mMY5pJyQT+IVo4czJVabxfdt2C6zsUHmkXMB/n5VDwiomogrHv1Jl4wBIspquDcms+mvGtU/PndDRgHrOhbTcC8W8pZc+pf0+cK1zwBHOwhZ4MhRTmYLqdBUa9TMEYA6E0xj57g3h3SVu4EC/WsH9bx1YWgEfezuK1S6gKsMs+LUJmJ9OBh58I6SCgYIaOpCoqiL8RJqja22OYzFSJKrEZXv4yJ/mWGXNUoDm88zViG/boVhr6EnrXhARZX5wmZx9Squ4klxQy0skVg5EUfB1Go8tfblWGVvhY3Vpqizl9Vlk4hEVNjd0|AQAB|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";
        RsaKeyMaterial rsaKeyMaterial = new RsaKeyMaterial(testPasspackJWK);

        String dataToEncode = "Hello World!";
        String encodedData = RsaEncryption.encryptWithPasspackJWK(rsaKeyMaterial, dataToEncode);
        System.out.println("encoded: " + encodedData);
        String decodedData = RsaEncryption.decryptWithPasspackJWK(rsaKeyMaterial, encodedData);
        Assertions.assertEquals(dataToEncode, decodedData);
    }

    @Test
    public void testDecryptV4FromWebApp() throws  Exception {
        String testPasspackJWK = "4|xBOoCclo0rnqAePxnM9cPRG3HIGbygjFPJZfBt6y3BtO+4wec+wOcz2Rev5n1X00YxDcOBxgm/IewbWYtYckw1hxP5JlYtCVkyicgMO32B/pC9chKPT/9fT+hEvABiS1PKVtGL6hrSwiUyEsudZFYp7FPNmbmx8dEjYdGM1JwbqKWqx65tgQ3afuoPrjQeUTQXY2nLgd6igAq5YwXkBur5UpGnsWvwX6num0oCnbck+KH2qIv6y4sPtcEop6uK5oCCP9cprSYTyl4lT+fC/hGuCQwFsORNEyu6F9Pfv//juamPsBeQ7T7Y2NG701yYXuFAyMfRgeO+U8Q/dskn94e7pLs/8ewJjxP5aszp6VFnjelyMqN4l1v/mMY5pJyQT+IVo4czJVabxfdt2C6zsUHmkXMB/n5VDwiomogrHv1Jl4wBIspquDcms+mvGtU/PndDRgHrOhbTcC8W8pZc+pf0+cK1zwBHOwhZ4MhRTmYLqdBUa9TMEYA6E0xj57g3h3SVu4EC/WsH9bx1YWgEfezuK1S6gKsMs+LUJmJ9OBh58I6SCgYIaOpCoqiL8RJqja22OYzFSJKrEZXv4yJ/mWGXNUoDm88zViG/boVhr6EnrXhARZX5wmZx9Squ4klxQy0skVg5EUfB1Go8tfblWGVvhY3Vpqizl9Vlk4hEVNjd0|AQAB|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";
        RsaKeyMaterial rsaKeyMaterial = new RsaKeyMaterial(testPasspackJWK);

        String dataToEncode = "Hello World";
        String encodedData = "AGiyVMM9vDkygEhsrqalcdDT+azmsnDmYI9ZRFBTSCo5tquRLElafMsqd0M6udlrv5I1xTYcZPnvrAEXMJ+nIzNhYNOa5IBNkCqL5uRoHGj8Za0E83rpWcrndRU6fl0mCwJPluYzFIsKvh7WFrny5GiDiYUZsI+OEQudwBHA0ecnNfpRlnAroQxdqT/47hXgxJxm29ENVjizdpCtw9+UaNkjC85IzSpEe9aaw/tlGh8HZ3Bmle5Tt6Qz0cZ84LO0gHSQYEwVfit/82GpxVmkHdOkyF4FDCCpU5yFC7ar3emx0q62LO3s7LzXqIgijtyk0KPYUrKEUVUI01TSpGpXgpaqYQO/HM4tFfuGyIoFox3qXqwsTnsun/IEpZTcBuL1MfDu+swDiejx2rIX82n3tc29weyTZyNmXqu9InPf0NAZPObfq/T5rAd0MQfDB98Ib4PngatU+US/QQfBoKUufvoY/JCH7wi5ZnYgI+8BfnhtkJQeb53f2ijCWIQVTET3HzYkJ2jahWyuXzhSYXh5TmA9jhb5EWOXiAev9Vxpe8W9STIoLQKes5YGfZkHNQ13mhq6T3hBcCCTAVwMHW0o3SJsXwUnY56XK+a2ScQ8SH0tlSx8VoSM1uIa9h2Wq2c/jjptr/q4Hp0scFEPHSzbzh0kB+82bz9rBgWhgC5Qfjs=";
        String decodedData = RsaEncryption.decryptWithPasspackJWK(rsaKeyMaterial, encodedData);
        Assertions.assertEquals(dataToEncode, decodedData);
    }

    @Test
    public void testConvertKeyPart() throws Exception {
        BigInteger v = new BigInteger(1, Base64.getUrlDecoder().decode("AQAB"));
        System.out.println("v: " + v);

    }
}
